openapi: 3.0.1
info:
  title: Argil API
  description: API for AI clone video generation
  version: 1.0.0
  license:
    name: MIT
servers:
  - url: https://api.argil.ai/v1
security:
  - ApiKeyAuth: []
paths:
  /voices:
    get:
      summary: List all voices
      description: Returns an array of Voice objects available for the user
      responses:
        200:
          description: An array of voices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Voice'
        400:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /avatars:
    get:
      summary: List all avatars
      description: Returns an array of Avatar objects available for the user
      responses:
        200:
          description: An array of avatars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Avatar'
        400:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /avatars/{id}:
    get:
      summary: Get an Avatar by id
      description: Returns a single Avatar identified by its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The id of the Avatar to retrieve
      responses:
        200:
          description: Detailed information about the Avatar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
        404:
          description: Avatar not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /videos:
    get:
      summary: Paginated list of Videos
      description: Returns a paginated array of Videos
      parameters:
        - name: page
          in: query
          description: Page number of the video list
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of videos per page
          required: false
          schema:
            type: integer
            default: 10
        - name: nameSearchQuery
          in: query
          description: Filter videos by name, case-insensitive substring match.
          required: false
          schema:
            type: string
        - name: avatarId
          in: query
          description: Filter videos by avatar ID.
          required: false
          schema:
            type: string
        - name: voiceId
          in: query
          description: Filter videos by voice ID.
          required: false
          schema:
            type: string
        - name: extrasFilter
          in: query
          description: A JSON string representing filters to apply on the extras JSON field. Must be a valid JSON object as a string, specifying properties and values to match.
          required: false
          schema:
            type: string
            example: '{"X_ID": "YOUR_CUSTOM_ID"}'
      responses:
        200:
          description: A paginated list of Videos
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    description: Total number of videos available
                  totalPages:
                    type: integer
                    description: Total number of pages
                  currentPage:
                    type: integer
                    description: Current page number
                  itemsPerPage:
                    type: integer
                    description: Number of items per page
                  videos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
        400:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new Video
      description: Creates a new Video with the specified details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoCreateArgs'
      responses:
        201:
          description: Successfully created Video
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /videos/{id}:
    get:
      summary: Get a Video by id
      description: Returns a single Video identified by its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The id of the Video to retrieve
      responses:
        200:
          description: Detailed information about the Video
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        404:
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a Video by id
      description: Delete a single Video identified by its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The id of the Video to delete
      responses:
        200:
          description: Success message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /videos/{id}/render:
    post:
      summary: Render a Video by id
      description: Returns a single Video object, with its updated status and information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The id of the Video to render
      responses:
        200:
          description: Detailed information about the Video
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        400:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks:
    post:
      summary: Create a new webhook
      description: Creates a new webhook with the specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - callbackUrl
                - events
              properties:
                callbackUrl:
                  type: string
                  description: URL to which the webhook will send POST requests.
                events:
                  type: array
                  items:
                    type: string
                    description: List of events the webhook is subscribing to.
                extrasFilters:
                  type: object
                  additionalProperties:
                    type: string
                  maxProperties: 10
      responses:
        201:
          description: Successfully created webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Retrieve all webhooks
      description: Retrieves all webhooks for the authenticated user.
      responses:
        200:
          description: An array of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        400:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks/{id}:
    put:
      summary: Update a webhook
      description: Updates the specified details of an existing webhook.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUrl:
                  type: string
                events:
                  type: array
                  items:
                    type: string
                extrasFilters:
                  type: object
                  additionalProperties:
                    type: string
                  maxProperties: 10
      responses:
        200:
          description: Successfully updated webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a webhook
      description: Deletes a single webhook identified by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted webhook
        404:
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Voice:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
        sampleUrl:
          type: string
    Avatar:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        gestures:
          type: array
          description: "A list of labelized gestures available for your avatar."
          items:
            type: object
            properties:
              label:
                type: string
                description: "A label for user readability. Can be setup from the app's UI."
              slug:
                type: string
                description: "Allows identifying the gesture when using it for a specific moment."
              startFrame:
                type: number
                description: "The startFrame of the source Avatar video to be used as start for the video template."
        status:
          type: string
        width:
          type: integer
        height:
          type: integer
        thumbnailUrl:
          type: string
    Video:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          description: "Can be either `IDLE`, `GENERATING_AUDIO`, `GENERATING_VIDEO`, `DONE` or `FAILED`."
        moments:
          type: array
          description: "An array of Moment items, each representing a portion of the complete video."
          items:
            type: object
            properties:
              transcript:
                type: string
                description: "A portion of the complete transcript. Current limit: 250 characters."
              avatarId:
                type: string
                description: "The id of the avatar to be used for this moment."
              voiceId:
                type: string
                description: "The id of the voice to be used for this moment."
              audioUrl:
                type: string
                description: "The audio that will be used for the video rendering. Automatically generated from the transcript when not provided. Current limit: 20 seconds."
              videoUrl:
                type: string
                description: "The url of the avatar rendering video for this moment."
              gestureSlug:
                type: string
                description: "The slug identifier of the gesture to be used for this moment."
        videoUrl:
          type: string
          description: "The url of the final avatar rendering video, containing all the moments merged."
        subtitles:
          type: object
          properties:
            enable:
              type: boolean
          description: "Subtitles settings for the video"
        extras:
          type: object
          description: "A dictionary of custom key-value pairs to extend the video metadata. Maximum of 5 key-value pairs of 256 characters allowed."
          additionalProperties:
            type: string
          maxProperties: 10
    VideoCreateArgs:
      type: object
      required:
        - name
        - moments
      properties:
        name:
          type: string
        moments:
          type: array
          description: "An array of Moment items, each representing a portion of the complete video."
          items:
            type: object
            required:
              - transcript
              - avatarId
              - voiceId
            properties:
              transcript:
                type: string
                description: "A portion of the complete transcript. Current limit: 250 characters"
              avatarId:
                type: string
                description: "The id of the avatar to be used for this moment"
              voiceId:
                type: string
                description: "The id of the voice to be used for this moment"
              gestureSlug:
                type: string
                description: "The slug identifier of the gesture to be used for this moment"
              audioUrl:
                type: string
                description: "Optional url to the audio to be used for the video rendering, for bypassing our audio generation model. Current limit: 20 seconds"
        subtitles:
          type: object
          properties:
            enable:
              type: boolean
          required:
            - enable
          additionalProperties: false
          description: "Subtitles settings for the video"
        aspectRatio:
          type: string
          enum: ['16:9', '9:16']
          description: "Select desired output aspectRatio: 16:9 or 9:16. Optional, default depends on used avatar."
        extras:
          type: object
          description: "Optional dictionary of custom key-value pairs to extend the video metadata. Maximum of 5 key-value pairs of 256 characters allowed"
          additionalProperties:
            type: string
          maxProperties: 10
    Webhook:
      type: object
      properties:
        id:
          type: string
        callbackUrl:
          type: string
        events:
          type: array
          items:
            type: string
        filters:
          type: object
          additionalProperties:
            type: string
          maxProperties: 10
        createAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastTriggeredAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Success:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: 'API key to be included in the x-api-key header'
